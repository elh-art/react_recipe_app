{"ast":null,"code":"import { randomFillSync } from 'crypto';\nimport { urlAlphabet } from './url-alphabet/index.js';\nexport { urlAlphabet };\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool, poolOffset;\n\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n    randomFillSync(pool);\n    poolOffset = 0;\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool);\n    poolOffset = 0;\n  }\n\n  poolOffset += bytes;\n};\n\nexport let random = bytes => {\n  fillPool(bytes -= 0);\n  return pool.subarray(poolOffset - bytes, poolOffset);\n};\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;\n  let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n\n    while (true) {\n      let bytes = getRandom(step);\n      let i = step;\n\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = function (alphabet) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nexport let nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  fillPool(size -= 0);\n  let id = '';\n\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63];\n  }\n\n  return id;\n};","map":{"version":3,"names":["randomFillSync","urlAlphabet","POOL_SIZE_MULTIPLIER","pool","poolOffset","fillPool","bytes","length","Buffer","allocUnsafe","random","subarray","customRandom","alphabet","defaultSize","getRandom","mask","Math","clz32","step","ceil","size","id","i","customAlphabet","nanoid"],"sources":["/home/elh/Downloads/code/dev_ed_react_pr1/node_modules/nanoid/index.js"],"sourcesContent":["import { randomFillSync } from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet }\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nexport let random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASA,WAAT;AACA,MAAMC,oBAAoB,GAAG,GAA7B;AACA,IAAIC,IAAJ,EAAUC,UAAV;;AACA,IAAIC,QAAQ,GAAGC,KAAK,IAAI;EACtB,IAAI,CAACH,IAAD,IAASA,IAAI,CAACI,MAAL,GAAcD,KAA3B,EAAkC;IAChCH,IAAI,GAAGK,MAAM,CAACC,WAAP,CAAmBH,KAAK,GAAGJ,oBAA3B,CAAP;IACAF,cAAc,CAACG,IAAD,CAAd;IACAC,UAAU,GAAG,CAAb;EACD,CAJD,MAIO,IAAIA,UAAU,GAAGE,KAAb,GAAqBH,IAAI,CAACI,MAA9B,EAAsC;IAC3CP,cAAc,CAACG,IAAD,CAAd;IACAC,UAAU,GAAG,CAAb;EACD;;EACDA,UAAU,IAAIE,KAAd;AACD,CAVD;;AAWA,OAAO,IAAII,MAAM,GAAGJ,KAAK,IAAI;EAC3BD,QAAQ,CAAEC,KAAK,IAAI,CAAX,CAAR;EACA,OAAOH,IAAI,CAACQ,QAAL,CAAcP,UAAU,GAAGE,KAA3B,EAAkCF,UAAlC,CAAP;AACD,CAHM;AAIP,OAAO,IAAIQ,YAAY,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,KAAsC;EAC9D,IAAIC,IAAI,GAAG,CAAC,KAAM,KAAKC,IAAI,CAACC,KAAL,CAAYL,QAAQ,CAACN,MAAT,GAAkB,CAAnB,GAAwB,CAAnC,CAAZ,IAAsD,CAAjE;EACA,IAAIY,IAAI,GAAGF,IAAI,CAACG,IAAL,CAAW,MAAMJ,IAAN,GAAaF,WAAd,GAA6BD,QAAQ,CAACN,MAAhD,CAAX;EACA,OAAO,YAAwB;IAAA,IAAvBc,IAAuB,uEAAhBP,WAAgB;IAC7B,IAAIQ,EAAE,GAAG,EAAT;;IACA,OAAO,IAAP,EAAa;MACX,IAAIhB,KAAK,GAAGS,SAAS,CAACI,IAAD,CAArB;MACA,IAAII,CAAC,GAAGJ,IAAR;;MACA,OAAOI,CAAC,EAAR,EAAY;QACVD,EAAE,IAAIT,QAAQ,CAACP,KAAK,CAACiB,CAAD,CAAL,GAAWP,IAAZ,CAAR,IAA6B,EAAnC;QACA,IAAIM,EAAE,CAACf,MAAH,KAAcc,IAAlB,EAAwB,OAAOC,EAAP;MACzB;IACF;EACF,CAVD;AAWD,CAdM;AAeP,OAAO,IAAIE,cAAc,GAAG,UAACX,QAAD;EAAA,IAAWQ,IAAX,uEAAkB,EAAlB;EAAA,OAC1BT,YAAY,CAACC,QAAD,EAAWQ,IAAX,EAAiBX,MAAjB,CADc;AAAA,CAArB;AAEP,OAAO,IAAIe,MAAM,GAAG,YAAe;EAAA,IAAdJ,IAAc,uEAAP,EAAO;EACjChB,QAAQ,CAAEgB,IAAI,IAAI,CAAV,CAAR;EACA,IAAIC,EAAE,GAAG,EAAT;;EACA,KAAK,IAAIC,CAAC,GAAGnB,UAAU,GAAGiB,IAA1B,EAAgCE,CAAC,GAAGnB,UAApC,EAAgDmB,CAAC,EAAjD,EAAqD;IACnDD,EAAE,IAAIrB,WAAW,CAACE,IAAI,CAACoB,CAAD,CAAJ,GAAU,EAAX,CAAjB;EACD;;EACD,OAAOD,EAAP;AACD,CAPM"},"metadata":{},"sourceType":"module"}